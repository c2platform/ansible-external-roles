---
- block:
    - set_fact: # e.g. /opt/ca/mydomain.com
        cacerts_dir_domain: "{{ cacerts_ca_dir }}/{{ domain }}"
        cacerts_dir_fqdn: "{{ cacerts_ca_dir }}/{{ domain }}/{{ ansible_fqdn }}"

    - name: Node certs dir # e.g. /opt/ca/mydomain.com/myserver.mydomain.local
      file:
        path: "{{ cacerts_dir_fqdn }}"
        state: directory
        mode: 0755

    #- debug:
    #    var: cert_deploy
    #  with_items:
    #    - "domain: {{ domain }}"
    #    - "ca_domain_cert: {{ ca_domain_cert }}"
    #    - "cert_deploy: {{ cert_deploy }}"

    - stat: # e.g. /opt/ca/mydomain.com/ca-mydomain.com.key
        path: "{{ cacerts_dir_domain }}/ca-{{ domain }}.key"
      register: ca_key

    - stat:
        path: "{{ cacerts_dir_domain }}/ca-{{ domain }}.crt"
      register: ca_crt

    - fail:
        msg: >
         {{ cacerts_dir_domain }}/ca-{{ domain }}.key not found!
          {{ ca_domain_cert['ca_domain'] }} was not found under cacerts_ca_domains
          cacerts_ca_domains:
          {{ cacerts_ca_domains }}
      when: not ca_key.stat.exists

    - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
      community.crypto.openssl_privatekey:
        path: "{{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.key"
        force: "{{ ca_domain_cert[cert_deploy]['force']|default(False) }}"
      register: cert_key

    - name: Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: "{{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.csr"
        privatekey_path: "{{ cert_key.filename }}"
        key_usage:
          - digitalSignature
          - keyAgreement
        extended_key_usage:
          - clientAuth
          - serverAuth
        common_name: "{{ ca_domain_cert[cert_deploy]['common_name'] }}"
        subject_alt_name: "{{ ca_domain_cert[cert_deploy]['subject_alt_name']|default(omit) }}"
        force: "{{ ca_domain_cert[cert_deploy]['force']|default(False) }}"
      register: cert_csr

    - name: Generate an OpenSSL certificate
      community.crypto.x509_certificate:
        path: "{{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.crt"
        privatekey_path: "{{ cert_key.filename }}"
        csr_path: "{{ cert_csr.filename }}"
        ownca_path: "{{ ca_crt.stat.path }}"
        ownca_privatekey_path: "{{ ca_key.stat.path }}"
        provider: ownca
        # ternary('ownca','selfsigned') is wel handig TODO
        force: "{{ ca_domain_cert[cert_deploy]['force']|default(False) }}"
      register: cert_crt

    - name: Generate pkcs12 file
      community.crypto.openssl_pkcs12:
        action: export
        path: "{{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.p12"
        friendly_name: "{{ ca_domain_cert[cert_deploy]['common_name'] }}"
        privatekey_path: "{{ cert_key.filename }}"
        certificate_path: "{{ cert_crt.filename }}"
        # was called 'ca_cerficates' before 2.8
        other_certificates: "{{ ca_crt.stat.path | default(omit) }}"
        force: "{{ ca_domain_cert[cert_deploy]['force']|default(False) }}"
        state: present
      register: cert_p12

    - name: Create PEM file
      shell:
        cmd: >
          cat {{ cert_key.filename }} {{ cert_crt.filename }} >
          {{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.pem
      changed_when: cert_crt.changed or cert_crt.changed

    - name: Fetch crt, key
      ansible.builtin.fetch:
        src: "{{ ck }}"
        dest: /tmp/
        flat: yes
      with_items:
        - "{{ cert_key.filename }}"
        - "{{ cert_crt.filename }}"
        - "{{ cacerts_dir_fqdn }}/{{ ca_domain_cert[cert_deploy]['common_name'] }}.pem"
      loop_control:
        loop_var: ck
      changed_when: cert_crt.changed or cert_crt.changed
  delegate_to: "{{ cacerts_ca_server }}"

- name: Copy key, certificate for group or host
  include_tasks: "_cert_copy.yml"
  vars:
    cacerts_certificate: "{{ ca_domain_cert[cert_deploy] }}"
  with_items: "{{ ca_domain_cert[cert_deploy]|c2platform.core.cacerts_certificate_group_keys(inventory_hostname, group_names) }}"
  loop_control:
    loop_var: cacerts_group_key
